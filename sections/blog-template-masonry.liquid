{% paginate blog.articles by 16 %}
<div data-section-id="{{ section.id }}" data-section-type="blog">
  <div class="page-width np-blog">

    {% comment %}
    {%- include 'breadcrumbs' -%}
	{% endcomment %}
    <header class="section-header{% if section.settings.blog_show_tag_filter and blog.tags.size > 0 %}{% unless settings.type_headers_align_text %} section-header--with-link{% endunless %}{% endif %}">
<!--       <h1 class="section-header__title">
        {{ blog.title }}

        {% if section.settings.blog_show_rss %}
          <a href="{{ shop.url }}{{ blog.url }}.atom" class="rss-link">
            <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-rss" viewBox="0 0 20 20"><path fill="#444" d="M5.903 16.586a2.489 2.489 0 1 1-4.977 0 2.489 2.489 0 0 1 4.977 0zM12.956 19.075H9.43c0-4.688-3.817-8.505-8.505-8.505V7.044c6.638 0 12.031 5.393 12.031 12.031z"/><path fill="#444" d="M15.445 19.075c0-8.028-6.493-14.52-14.52-14.52V.925c10.019 0 18.15 8.131 18.15 18.15h-3.63z"/></svg>
            <span class="icon__fallback-text">RSS</span>
          </a>
        {% endif %}
      </h1>

      {% if section.settings.blog_show_tag_filter and blog.tags.size > 0%}
        <select id="BlogTagFilter">
          <option value="/blogs/{{ blog.handle }}">All</option>
          {% for tag in blog.all_tags %}
            {%- include 'filter-out-custom-tags' -%}
            <option value="/blogs/{{ blog.handle }}/tagged/{{ tag | handleize }}" {% if current_tags contains tag %}selected{% endif %}>{{ tag }}</option>
          {% endfor %}
        </select>
      {% endif %} -->
<!--       <div class="allblog">
        {% for article in blog.articles %}
        {% for tag in article.tags %}
                      {%- include 'filter-out-custom-tags' -%}
                      <a href="{{ blog.url }}/tagged/{{ tag | handle }}">{{ tag }}</a> &middot;
         {% endfor %}
        {% endfor %}
      </div> -->
      
      <div class="np-blog-menu">
        <h1>Filter Journal </h1>
        <a href="/blogs/all/tagged/all">All</a>
        {% for link in linklists[section.settings.blog-menu].links %}
        	 <a href="{{ link.url }}">{{ link.title }}</a>
        {% endfor %}
      </div>
    </header>

    <div class="masonry">
      {% for article in blog.articles %}
        {% include 'article-grid-item-alt', grid_item_width: 'medium-up--one-third', per_row: '2', image_size: section.settings.blog_image_size %}
      {% endfor %}
    </div>

    {% if paginate.pages > 1 %}
      {% include 'pagination' %}
    {% endif %}
	
    
  </div>
  
</div>
<script src="https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js"></script>
{% endpaginate %}

{% schema %}
  {
    "name": "Blog pages",
    "settings": [
      {
        "type": "checkbox",
        "id": "blog_show_tag_filter",
        "label": "Show tag filter"
      },
      {
        "type": "checkbox",
        "id": "blog_show_rss",
        "label": "Show RSS link"
      },
      {
        "type": "checkbox",
        "id": "blog_show_tags",
        "label": "Show tags"
      },
      {
        "type": "checkbox",
        "id": "blog_show_date",
        "label": "Show date",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "blog_show_comments",
        "label": "Show comment count",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "blog_show_author",
        "label": "Show author"
      },
      {
        "type": "checkbox",
        "id": "blog_show_excerpt",
        "label": "Show excerpt"
      },
	  { 
		"type": "link_list", 
        "id": "blog-menu", 
        "label": "Choose Blog Menu", 
        "info": "This menu will show in Journal" 
      },
	  { 
		"type": "image_picker",
         "id": "np-paginate-prev",
         "label": "Previous Image"
      },
	  { 
		"type": "image_picker",
         "id": "np-paginate-next",
         "label": "Next Image"
      }
    ]
  }
{% endschema %}

{% stylesheet %}
.np-blog {
	margin-bottom: 40px;

}
.np-blog-menu a {
	padding: 5px 15px 0 15px;
    font-size: 15px;
    color:#000;
}
.np-blog-menu h1 {
	opacity: 0.45;
	font-size: 1.11111em;
}
.np-blog-menu a:active {
	text-decoration: underline;
}
.np-blog-menu a:hover{
	color:rgba(0,0,0,0.4);
	text-decoration: underline;
}
.np-blog-menu p {
	margin-bottom: 0px;
}
.blog-template-masonry .section-header {
	margin-bottom: 25px;
}

.masonry {
  display: grid;
  grid-template-columns: repeat(1, minmax(100px,1fr));
  grid-gap: 10px 90px;
  grid-auto-rows: 0;
  max-width: 940px;
  margin: 0 auto;
}
  .masonry-content{
  	width: 100%;
    object-fit:cover;
  }   
@media only screen and (max-width: 1023px) and (min-width: 768px) {
  .masonry {
    grid-template-columns: repeat(2, minmax(100px,1fr));
  }
}
@media only screen and (min-width: 1024px) {
  .masonry {
    grid-template-columns: repeat(2, minmax(100px,1fr));
  }
}

{% endstylesheet %}


{% javascript %}


function resizeMasonryItem(item) {
  var grid = document.getElementsByClassName('masonry')[0];
  if (grid) {
    var rowGap = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-row-gap')),
      rowHeight = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-auto-rows')),
      pHeight = item.querySelector('.article__grid-meta').getBoundingClientRect().height,
      gridImagesAsContent = item.querySelector('img.masonry-content');

    var rowSpan = Math.ceil((item.querySelector('img.masonry-content').getBoundingClientRect().height + pHeight + rowGap) / (rowHeight + rowGap));

    item.style.gridRowEnd = 'span ' + rowSpan;
    if (gridImagesAsContent) {
      item.querySelector('img.masonry-content').style.height = item.querySelector('img').height + "px";
    }
  }
}

function resizeAllMasonryItems() {
  var allItems = document.querySelectorAll('.masonry-item');
  if (allItems) {
    for (var i = 0; i > allItems.length; i++) {
      resizeMasonryItem(allItems[i]);
    }
  }
}

function waitForImages() {
  var allItems = document.querySelectorAll('.masonry-item');
  if (allItems) {
    for (var i = 0; i < allItems.length; i++) {
      imagesLoaded(allItems[i], function (instance) {
        var item = instance.elements[0];
        resizeMasonryItem(item);
      });
    }
  }
}

var masonryEvents = ['load', 'resize'];
masonryEvents.forEach(function (event) {
  window.addEventListener(event, resizeAllMasonryItems);
});

waitForImages();


{% endjavascript %}
