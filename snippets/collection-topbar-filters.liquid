{% liquid
    assign sort_by = collection.sort_by
    assign default_sort_by = collection.default_sort_by
    assign sort_options = collection.sort_options
  %}
  
  <div class="topbar-filter-section np-h6">
    <div class="collection-name">SHOP - {{ collection.title }} ({{ collection.products_count }})</div>
    <ul class="filter-list">
      {% for filter in filters %}
        {% assign filter_label = filter.label | replace: ' ', '-' %}
        <div class="filter-container-{{ filter_label }}">
          <li class="filter-label filter-{{ filter_label }}">
            {% if filter_label == "Product-type" %}
              Category
            {% else %}
              {{ filter_label }}
            {% endif %}
          </li>
          <ul class="filter-options-list filter-{{ filter_label }}-options">
            {% for value in filter.values %}
              {% if filter_label != 'Size' %}
                {% if value.active %}
                  <li class="filter-value-item active"><a href="{{ value.url_to_remove }}">{{ value.label }}</a></li>
                {% else %}
                  <li class="filter-value-item"><a href="{{ value.url_to_add }}">{{ value.label }}</a></li>
                {% endif %}

              {% else %}
                  {% if value.active %}
                    <li class="filter-value-item active size-filter"><a data-url="{{ value.url_to_remove }}" href="{{ value.url_to_remove }}">{{ value.label }}</a></li>
                  {% else %}
                    <li class="filter-value-item inactive size-filter"><a data-url="{{ value.url_to_add }}" href="{{ value.url_to_add }}">{{ value.label }}</a></li>
                  {% endif %}
              {% endif %}
            {% endfor %}
            
          </ul>
        </div>
      {% endfor %}
    </ul>
    <div class="sorting-section">
      <span class="sort-btn">SORT BY</span>
      <ul class="sort-list">
        {% for option in sort_options %}
          {% if sort_by == option.value %}
            <li class="sort-list-item active" data-name="{{ option.value }}">{{ option.name }}</li>
          {% else %}
            <li class="sort-list-item" data-name="{{ option.value }}">{{ option.name }}</li>
          {% endif %}
        {% endfor %}
      </ul>
    </div>
  </div>

  <div class="topbar-active-filter-section np-h6">
    {% for filter in filters %}
      {% if filter.label != 'Size' %}
        {% for value in filter.values %}
          {% assign value_label = value.label | replace: ' ', '-' %}
            {% if value.active %}
            <a href="{{ value.url_to_remove }}" class="active-filter-item item-{{ value_label }}"><span class="active-filter-label">{{ value.label }}</span><span class="active-filter-cross">X</span></a>
            {% endif %}
        {% endfor %}
      {% else %}
        {% for value in filter.values %}
          {% assign value_label = value.label | replace: ' ', '-' %}
            {% if value.active %}
              <a href="{{ value.url_to_remove }}" data-url="{{ value.url_to_remove }}" class="inactive-filter-item item-{{ value_label }} active size-filter"><span class="active-filter-label">{{ value.label }}</span><span class="active-filter-cross">X</span></a>
            {% endif %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    <div class="active-filter-clear-item filter-reset dont-show"><span>CLEAR ALL</span></div>
  </div>
  
  <script>
function sizeFilterRemoval() {
  var sizeFilters = document.querySelectorAll(".active.size-filter")
  sizeFilters.forEach(item=>{
    item.addEventListener("click", (e)=>{
      e.preventDefault()
      if (e.target.dataset.url.includes("option.size")){
        var tempUrl = e.target.dataset.url
      }
      else {
        var tempUrl = e.target.dataset.url.replace("&filter.v.availability=1", "")
      }
      var index = tempUrl.indexOf("?")
      var length = tempUrl.length
      var newParam = tempUrl.substr(index, length-1)
      if (newParam === '?filter.v.availability=1'){
        window.location.search = ""
      }
      else {
        window.location.search = newParam
      }
    })
  })
}

function sizeFilterAddition(){
  var sizeFilters = document.querySelectorAll(".inactive.size-filter")
  sizeFilters.forEach(item=>{
    item.addEventListener("click", (e)=>{
      e.preventDefault()
      var url;
      if (e.target.dataset.url.includes("availability")){
        url = e.target.dataset.url
      }
      else {
        url = e.target.dataset.url + "&filter.v.availability=1"
      }
      var tempUrl = url
      var index = tempUrl.indexOf("?")
      var length = tempUrl.length
      var newParam = tempUrl.substr(index, length-1)
      window.location.search = newParam
    })
  })
}

function showClearFilter(){
    const activeFilters = document.querySelectorAll(".active-filter-item")
    if (activeFilters.length > 0) document.querySelector(".active-filter-clear-item").classList.remove("dont-show")
}
  function resetFilter(){
    var target = document.querySelector(".filter-reset")
    target.addEventListener('click', ()=>{
      window.location.search = ""
    })
  }
  function sortingFunctionWithoutMultipleOptions(){
    var sortItems = document.querySelectorAll(".sort-list-item")
    sortItems.forEach(item=>{
      item.addEventListener('click', (e)=>{
        let url = "";
        if (window.location.search.indexOf("filter") === -1){
          url += `?sort_by=${e.target.dataset.name}`
        }
        else {
          var index = window.location.search.indexOf("sort_by")
          switch (index) {
            case -1: url += window.location.search + `&sort_by=${e.target.dataset.name}`; break;
            default:
              var initIndex = window.location.search.indexOf("sort_by")
              var toBeReplaced = window.location.search.slice(initIndex)
              url += window.location.search.replace(toBeReplaced, `sort_by=${e.target.dataset.name}`)
          }
        }
        window.location.search = url
      })
    })
  }
  function sortingFunctionWithMultipleOptions(){
    var sortItems = document.querySelectorAll(".sort-list-item")
    sortItems.forEach(item=>{
      item.addEventListener('click', (e)=>{
        let url = "";
        if (window.location.search.indexOf("filter") === -1){
          var index = window.location.search.indexOf("sort_by")
          switch (index) {
            case -1: url += `?sort_by=${e.target.dataset.name}`; break;
            default: url = window.location.search + `&sort_by=${e.target.dataset.name}`;
          }
        }
        else {
          url += window.location.search + `&sort_by=${e.target.dataset.name}`
        }
        window.location.search = url
      })
    })
  }
  function applyClickEventForFilter() {
    document.querySelectorAll(".filter-label").forEach(label=>{
      label.addEventListener('click', (event)=> {
        var className = `${event.target.classList[1]}-options`
        var target = document.querySelector(`.${className}`)
        var sortingList = document.querySelector(".sort-list")
        if (target.classList.contains("show-filter")){
          target.classList.remove("show-filter")
        }
        else {
          target.classList.add("show-filter")
          document.querySelectorAll(".filter-options-list").forEach(item => {
            if (item !== target) item.classList.remove("show-filter");
          })
        }
        if (sortingList.classList.contains("show-sort-list")) {
          sortingList.classList.remove("show-sort-list")
        }
      })
    })
  }
  function applyClickEventForSorting() {
    var target = document.querySelector(".sorting-section")
    target.addEventListener('click', ()=>{
      // sorting
      document.querySelectorAll(".filter-options-list").forEach(option=>{
        if (option.classList.contains("show-filter")) {
          option.classList.remove("show-filter")
        }
      })

      if (document.querySelector(".sort-list").classList.contains('show-sort-list')){
        document.querySelector(".sort-list").classList.remove('show-sort-list')
      }
      else {
        document.querySelector(".sort-list").classList.add('show-sort-list')
      }
    })
  }
  function removeFilterOptionList(){
    var topBarFilterSection = document.querySelector(".topbar-filter-section")
    topBarFilterSection.addEventListener('click', (e)=>{
      if (e.target !== topBarFilterSection) return false
      document.querySelectorAll(".filter-options-list").forEach(item => {
        item.classList.remove("show-filter")
      })
    })
  }

  function checkForActiveFilters(){
    const target = document.querySelector(".topbar-active-filter-section")
    if (window.location.search.indexOf("filter") != -1){
      target.classList.remove("hide")
    }
    else {
      target.classList.add("hide")
    }
  }

  applyClickEventForFilter()
  applyClickEventForSorting()
  sortingFunctionWithoutMultipleOptions()
  resetFilter()
  removeFilterOptionList()
  showClearFilter()
  sizeFilterRemoval()
  sizeFilterAddition()
  checkForActiveFilters()
  </script>